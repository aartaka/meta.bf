>>>>[-] move to case flag/instruction pointer and empty it
> to the instructions
[>]< to the last instruction
[ compact all cells by 31 (the biggest unused special ASCII char)
 ----- ----- ----- -----
 ----- ----- - <]
> back to instuctions
interpreter switch/loop
[<+> set case flag
 [plus (43 minus 31)
  ----- ----- --
  [- comma (44 minus 31)
   [- minus (45 minus 31)
    [- period (46 minus 31)
     [less than (60 minus 31)
      ----- ----- ----
      [-- greater than (62 minus 31)
       [opening bracket (91 minus 31)
        ----- -----
        ----- -----
        ----- ----
        [-- closing bracket (93 minus 31)
         [ default case
          restore and move the original value (93 minus 31)
          +++++ +++++ +++++ +++++ +++++ +++++
          +++++ +++++ +++++ +++++ +++++ +++++ ++
          [<<<+>>>-]
          <->] kill the case flag and exit
         case closing bracket
         <[- kill the flag
          restore the value (93 minus 31 or closing bracket)
          << ++ +++++ +++++ +++++ +++++ +++++
          +++++ +++++ +++++ +++++ +++++ +++++ +++++
          tovaluecell()
          if the cell is not zero then move the instruction pointer
          to the opening bracket
          tovalue() value cell
          [fromvaluecell()
           << move to the last instruction
           [>>>+<<<-] copy it to be processed
           >+ set up the bracket count
           [<+ set up the case flag
            <[switch:
             opening bracket
             ----- ----- ----- ----- ----- -----
             ----- ----- ----- ----- ----- -----
             [-- closing bracket
              [default:
               >-< kill flag
               restore the character
               ++ +++++ +++++ +++++ +++++ +++++ +++++
               +++++ +++++ +++++ +++++ +++++ +++++
               [>>>+<<<-] copy to be processed later
              ]
              >[ case closing bracket:
               - kill the flag
               >+ increase bracket count
               > ++ +++++ +++++ +++++ +++++ +++++ +++++
               +++++ +++++ +++++ +++++ +++++ +++++ restore bracket
               <<
              ]<
             ]
             >[ case opening bracket:
              - kill the flag
              >- decrease the bracket count
              restore opening bracket
              >     +++++ +++++ +++++ +++++ +++++ +++++
              +++++ +++++ +++++ +++++ +++++ +++++
              << back to the flag
             ]<
            ]
            >>[<+>-] move the bracket count
            <] and loop while it's positive
           we're at [P] [0] [B(0)^] [0] [opening bracket] [T]
           >>[<<<+>>>-] copy the opening bracket to move inside it
           <<< to the copied bracket
           move to the value cell
           tovaluecell()
           tovalue()[fromvalue()+tovalue()-]] backup the value cell to N and exit
          fromvalue()[tovalue()+fromvalue()-]tovalue() copy the value if it was backed up
          fromvaluecell()
         ]>]
        < case opening bracket
        [[-] kill the flag
         + and set the bracket count instead of it
         restore 91 (opening bracket)
         <<    +++++ +++++ +++++ +++++ +++++
         +++++ +++++ +++++ +++++ +++++ +++++ +++++
         >> back to the bracket count
         [ matching bracket search
          >+ set case flag
          >[switch:
           opening bracket (91 minus 31)
           ----- ----- ----- ----- ----- -----
           ----- ----- ----- ----- ----- -----
           [ closing bracket (93 minus 31)
            --
            [ default:
             <-> kill the flag
             restore the character
             ++ +++++ +++++ +++++ +++++ +++++ +++++
             +++++ +++++ +++++ +++++ +++++ +++++
             [<<<+>>>-] copy the character to the processed sector
            ]
            <[ case closing bracket:
             - kill the flag
             <- subtract one from the bracket count
             restore closing bracket in the processed sector
             <  ++ +++++ +++++ +++++ +++++ +++++ +++++
             +++++ +++++ +++++ +++++ +++++ +++++
             >> back to the case flag
            ]>
           ]
           <[ case opening bracket:
            - kill the flag
            <+ add one to the bracket count
            restore opening bracket in the processed sector
            <     +++++ +++++ +++++ +++++ +++++
            +++++ +++++ +++++ +++++ +++++ +++++ +++++
            >> back to the case flag
           ]>
          ]
          <<[>+<-]> copy the bracket count closer and loop
         ] matching bracket search ends
         we're at [P] [closing bracket] [0] [B(0)^] [0] [T]
         <<[>>>+<<<-] copy the closing bracket to be processed next
         > back to the new fake case flag
        ]>]
       < case greater than
       [- kill the flag
        restore the value (62 minus 31 or greater than)
        << + +++++ +++++ +++++ +++++ +++++ +++++
        add/subtract one to N
        [<]<right()
        back to the killed flag
        >>[>]>
       ]>]
      < case less than
      [- kill the flag
       restore the value (60 minus 31 or less than)
       <<++++ +++++ +++++ +++++ +++++ +++++
       subtract/add one to N
       [<]<left()
       back to the killed flag
       >>[>]>
      ]>]
     < case period
     [- kill the flag
      restore the value (46 minus 31 or period)
      << +++++ +++++ +++++
      tovaluecell()
      tovalue(). print the value cell
      fromvaluecell()
     ]>]
    < case minus
    [- kill the flag
     restore the value (45 minus 21 or minus)
     <<++++ +++++ +++++
     tovaluecell()
     tovalue()- decrease it
     fromvaluecell()
    ]>]
   < case comma
   [- kill the flag
    restore the value (44 minus 31 or comma)
    <<+++++ +++++ +++
    move to the pointed cell
    tovaluecell()
    tovalue(), read to it
    fromvaluecell()
   ]>]
  < case plus
  [- kill the flag
   restore the value (43 minus 31 or plus)
   <<+++++ +++++ ++
   tovaluecell()
   tovalue()+ increase it
   fromvaluecell()
  ]>]
 >] next instruction
move instructions to where they've been initially and add 31 back
<<<<[+++++ +++++ +++++ +++++ +++++ +++++ + [>>>+<<<-]<]
< N
